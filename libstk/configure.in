AC_INIT(AUTHORS)
AM_INIT_AUTOMAKE(libstk, 0.2.0)

libstk_libtool_version=0:2:0
AC_SUBST(libstk_libtool_version)

AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LIBTOOL


dnl **** Boost Headers and libraries
dnl FIXME is this AC_LANG SAVE/RESTORE stuff necessary ?
AC_LANG_SAVE
AC_LANG([C++])
AC_CHECK_HEADER(boost/shared_ptr.hpp, , [AC_MSG_ERROR( *** boost/shared_ptr.hpp not found - build will fail)])
AC_CHECK_HEADER(boost/weak_ptr.hpp, , [AC_MSG_ERROR( *** boost/weak_ptr.hpp not found - build will fail)])
AC_CHECK_HEADER(boost/signal.hpp, , [AC_MSG_ERROR( *** boost/signal.hpp not found - build will fail)])
AC_CHECK_HEADER(boost/shared_array.hpp, , [AC_MSG_ERROR( *** boost/shared_array.hpp not found - build will fail)])
AC_CHECK_HEADER(boost/operators.hpp, , [AC_MSG_ERROR( ***  boost/operators.hpp not found - build will fail)])
AC_CHECK_HEADER(boost/bind.hpp, , [AC_MSG_ERROR( *** boost/bind.hpp not found - build will fail)])
AC_CHECK_HEADER(boost/optional.hpp, , [AC_MSG_ERROR( *** boost/optional.hpp not found - build will fail)])

dnl FIXME make this use AC_CHECK_HEADERS and update the event_system/producers accordingly
dnl AC_CHECK_HEADER(boost/thread/mutex.hpp, , [AC_MSG_ERROR( *** boost/thread/mutex.hpp not found - build will fail)])

AC_CHECK_LIB(boost_signals-gcc-mt-1_31, main, , [AC_MSG_ERROR( *** boost_signals library not found - build will fail)])
AC_CHECK_LIB(boost_thread-gcc-mt-1_31, main, , [AC_MSG_ERROR( *** boost_thread library not found - build will fail)])
AC_LANG_RESTORE


dnl ---------------------------------------------
dnl Find pkg-config -- perhaps we should axe this dependency and use freetype-config, libpng-config, etc...
dnl ---------------------------------------------
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test x$PKG_CONFIG = xno ; then
  AC_MSG_ERROR( *** pkg-config not found. See http://pkgconfig.sourceforge.net
   ***     Freetype2 cannot be detected (build will fail)
   ***     Other components that depend on pkg-config
   ***       DirectFB
   ***       Libpng
   ***       Libjpeg62
   ***       xine
  )
dnl list other pkg-config dependent parts here
fi

dnl **** Freetype2 compile flags
PKG_CHECK_MODULES(FREETYPE, freetype2)
AC_SUBST(FREETYPE_CFLAGS)
AC_SUBST(FREETYPE_LIBS)

dnl **** Libpng support 
AC_ARG_ENABLE(libpng,
    [  --enable-libpng	builds with image loading support for lib png [default=yes]],,
    enable_libpng=yes)
if test x$enable_libpng == xyes; then
    PKG_CHECK_MODULES(LIBPNG, libpng,
    [
        AC_MSG_RESULT([ *** Libpng Support enabled])
        AC_DEFINE(HAVE_LIBPNG,true,[Libpng support should be compiled in])
    ],
    [AC_MSG_WARN([ *** Libpng support requested, but pkg-config failed to find it])]
    )
fi    
AM_CONDITIONAL(LIBPNG, test x$enable_libpng = xyes)
AC_SUBST(LIBPNG_CFLAGS)
AC_SUBST(LIBPNG_LIBS)

dnl **** Libjpeg support FIXME Need library and compile flags
AC_ARG_ENABLE(libjpeg,
    [  --enable-libjpeg	builds with image loading support for lib jpeg [default=yes]],,
    enable_libjpeg=yes)
 if test x$enable_libjpeg == xyes; then
    AC_HEADER_CHECK(jpeglib.h,
    [
        AC_CHECK_LIB(jpeg, main,[
            LIBJPEG_LIBS=-ljpeg
            AC_MSG_RESULT([ *** Libjpeg62 Support enabled])
            AC_DEFINE(HAVE_LIBJPEG,true,[Libjpeg support should be compiled in])
        ], [AC_MSG_ERROR( *** libjpeg62 library not found - build will fail)])

    ],
    [AC_MSG_WARN([ *** Libjpeg62 support requested, but failed to find it])]
    )
fi    
AM_CONDITIONAL(LIBJPEG, test x$enable_libjpeg = xyes)
dnl AC_SUBST(LIBJPEG_CFLAGS)
AC_SUBST(LIBJPEG_LIBS)


dnl **** SDL compile flags
AC_ARG_ENABLE(sdl,
  [  --enable-sdl          build with SDL backend support [default=no]],,
  enable_sdl=no)
if test x$enable_sdl = xyes; then
  SDL_VERSION=1.2.0	
  AM_PATH_SDL($SDL_VERSION,:,AC_MSG_WARN([*** SDL version $SDL_VERSION not found!]);enable_sdl=no)
  AC_MSG_RESULT([ *** SDL Support enabled])
  AC_DEFINE(HAVE_SDL,true,[SDL support compiled in])
fi
AM_CONDITIONAL(SDL, test x$enable_sdl = xyes)
AC_SUBST(SDL_CFLAGS)
AC_SUBST(SDL_LIBS)

dnl **** DirectFB compile flags
AC_ARG_ENABLE(directfb,
    [  --enable-directfb          build with DirectFB backend support [default=no]],,
    enable_directfb=no)
if test x$enable_directfb = xyes; then
    PKG_CHECK_MODULES(DIRECTFB, directfb,
    [
        AC_MSG_RESULT([ *** DirectFB Support enabled])
        AC_DEFINE(HAVE_DIRECTFB,true,[DirectFB support should be compiled in])
    ],
    [AC_MSG_WARN([ *** DirectFB support requested, but pkg-config failed to find it])]
    )
fi
AM_CONDITIONAL(DFB, test x$enable_directfb = xyes)
AC_SUBST(DIRECTFB_CFLAGS)
AC_SUBST(DIRECTFB_LIBS)

dnl **** Framebuffer compile flags
AC_ARG_ENABLE(fbdev,
  [  --enable-fbdev             build with /dev/fb backend support [default=no]],,
  enable_fbdev=no)
if test x$enable_fbdev = xyes; then
  AC_MSG_RESULT([ *** FrameBuffer Support enabled])
  AC_DEFINE(HAVE_FBDEV,true,[FrameBuffer Support compiled in])
fi
AM_CONDITIONAL(FBDEV, test x$enable_fbdev = xyes)

dnl no backend error
if test x$enable_sdl = xno && test x$enable_directfb = xno && test x$enable_fbdev = xno ; then
 AC_MSG_ERROR([No Backend Selected])
fi

dnl **** xine support 
AC_ARG_ENABLE(xine,
  [  --enable-xine          build with xine support [default=no]],,
  enable_xine=no)
if test x$enable_xine == xyes; then
    PKG_CHECK_MODULES(XINE, libxine,
    [
        AC_MSG_RESULT([ *** xine Support enabled])
        AC_DEFINE(HAVE_XINE,true,[xine Support compiled in])
    ],
    [AC_MSG_WARN([ *** Xine support requested, but pkg-config failed to find it])]
    )
fi    
AM_CONDITIONAL(XINE, test x$enable_xine = xyes)
AC_SUBST(XINE_CFLAGS)
AC_SUBST(XINE_LIBS)

dnl Logging flags
AC_ARG_ENABLE(logging,
 	[  --enable-logging	builds with Debug message logger activated [default=no]],,
        enable_logging=no)
if test x$enable_logging == xyes; then
	AC_MSG_RESULT([ *** Logging enabled])
	AC_DEFINE(HAVE_LOGGING,true,[Logging should be compiled in])
fi
AM_CONDITIONAL(LOGGING, test x$enable_logging = xyes)


dnl libstk printing support
AC_ARG_ENABLE(printing,
	[  --enable-printing	build with Support for embedded Printer output [default=no]],,
	enable_printing=no)
if test x$enable_printing == xyes; then
	AC_MSG_RESULT([ *** Printing support enabled])
	AC_DEFINE(HAVE_PRINTING,true,[Printing support should be build])
fi
AM_CONDITIONAL(PRINTING, test x$enable_printing = xyes)

dnl Build the test apps 
AC_ARG_ENABLE(tests,
 	[  --enable-tests	builds the tests [default=no]],,
        enable_tests=no)
if test x$enable_tests == xyes; then
	AC_MSG_RESULT([ *** Libstk tests will be built])
	AC_DEFINE(HAVE_TESTS,true,[Libstk tests will be built])
else
	AC_MSG_RESULT([ *** Libstk tests will not built])
fi
AM_CONDITIONAL(TESTS, test x$enable_tests = xyes)


AC_SUBST(top_srcdir)
AC_SUBST(prefix)

AM_CONFIG_HEADER(libstk/config.h)

CXXFLAGS="$CXXFLAGS -Wall -W -Wno-switch -pedantic -O3 -pthread"

AC_OUTPUT([
Makefile
libstk/Makefile
test/Makefile
libstk.pc
])
