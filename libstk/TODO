MEETING TOPICS
==============
- discuss surfaces: creation, blitting, etc.
- tab stops
- should we use rectangle::ptr, string::ptr, etc everywhere?  it is awkward to have 
      a method receive a "const rectangle&" and a "image::ptr"


TASKS (Some duplicated items here and below)
============================================
Spinner / Numeric Spinner
List Item Height (not built into theme)
Purge all magic numbers
Convert all output to new logger
remove tab stop code (maybe add in libstk 2.0, not really critical)
Scroll bars / box
Edit Box
Combo Box
Text Area
Markup Area (simple html renderer ?)
Surface blitting / locking / creation (from app surface ?)
rectangle& or rectangle::ptr
input capabilities
list item data type
widget regions (define in theme, check in handle_event() on pointer
     click, ie UP_ARROW, DOWN_ARROW, TEXT_BOX)
Image (png loader, own surface, blit)
Video Panel
surface_fbdev
event_producer_linux
IR support (IRDA / generic serial ?)
Software Pointer (common to all graphic backends)
Finalize font interface / implementation
Document all existing classes / APIs
Polish the build environment 

DOCUMENTATION
=============
dependecy / compile instructions
decide on a format
ie:
    /// This is a brief description, until the dot.
    /// This is a detailed description of the entity immmediately
    /// below these lines of the description
    class|function { }
write it!!!!

OTHER
======
png image loader - Marc
input_capabilities - Marc
Better font loading error messages.
list::create(boost::shared_ptr< list > parent, std::wstring label, std::string data)
    we are mixing std::string and std::wstring here, 
We shouldnt be using a string for "data" anyway!!! (marc)

WIDGETS TO WRITE
================
combo - Darren
numeric_spinner - Darren
edit_box - Dirk
scroll_bar - Marc
text_area
uberscript_panel (support for HTML, perhaps more strict... XHTML ?)
OSD keyboard - Marc

MEDIA WIDGETS
=============
??


